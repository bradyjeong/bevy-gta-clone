name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Phase 5A: CI updated to skip deprecated crates (amp_spatial, amp_gpu, amp_world)
# These crates are excluded via Cargo.toml workspace.exclude

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings"
  RUST_BACKTRACE: 1

jobs:
  # Multi-OS build matrix with fail-fast disabled for complete coverage
  check:
    name: Check (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        toolchain: ["stable", "1.85.0"]  # Include MSRV testing
        include:
          # Test nightly only on Ubuntu to reduce CI time
          - os: ubuntu-latest
            toolchain: nightly
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          components: rustfmt, clippy
          override: true
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.toolchain }}
          # Cache cargo registry, git deps, and build artifacts
          cache-targets: true
          cache-all-crates: true
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Run clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings
      
      - name: Run tests
        run: cargo test --workspace --all-features
      
      - name: Run coverage tests (Oracle Phase 5A)
        run: cargo test --workspace --all-features --lib --test-threads=1
      
      - name: Check documentation
        run: cargo doc --workspace --no-deps --all-features
      
      - name: Check rustdoc warnings
        run: RUSTDOCFLAGS="-D warnings" cargo doc --workspace --no-deps --all-features

  # Phase 1B: Feature flag testing matrix
  feature-matrix:
    name: Feature Matrix (${{ matrix.features }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        features:
          - "--no-default-features"
          - "--all-features"
          - "--features bevy16"  # Test amp_engine's bevy16 feature
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: feature-matrix-${{ matrix.features }}
          cache-targets: true
          cache-all-crates: true
      
      - name: Build with ${{ matrix.features }}
        run: cargo build --workspace ${{ matrix.features }}
      
      - name: Test with ${{ matrix.features }}
        run: cargo test --workspace ${{ matrix.features }}
      
      - name: Clippy with ${{ matrix.features }}
        run: cargo clippy --workspace --all-targets ${{ matrix.features }} -- -D warnings

  # Phase 1B: amp_engine crate isolated testing
  amp-engine-test:
    name: amp_engine Crate Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: amp-engine-test
          cache-targets: true
          cache-all-crates: true
      
      - name: Test amp_engine default features
        run: cargo test -p amp_engine
      
      - name: Test amp_engine with bevy16 feature
        run: cargo test -p amp_engine --features bevy16
      
      - name: Build amp_engine with all features
        run: cargo build -p amp_engine --all-features
      
      - name: Clippy amp_engine with all features
        run: cargo clippy -p amp_engine --all-features -- -D warnings

  # Phase 1B: Dependency checking with cargo-deny
  deny:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install cargo-deny
        uses: taiki-e/install-action@cargo-deny
      
      - name: Check licenses
        run: cargo deny check licenses
      
      - name: Check advisories
        run: cargo deny check advisories
      
      - name: Check bans
        run: cargo deny check bans
      
      - name: Check sources
        run: cargo deny check sources

  benchmark:
    name: Performance Benchmarks
    needs: [check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: benchmark-stable
          cache-targets: true
      
      - name: Run gameplay_factory spawn_100k benchmark
        run: |
          cargo bench -p gameplay_factory --bench factory_spawn spawn_100k
      
      - name: Check performance gates
        run: |
          echo "🎯 Performance Gate: spawn_100k should be ≤3.0ms on release build"
          # TODO: Add actual performance gate validation once baseline is established
          # Expected: ≤3.0ms total time, ≤1.2× legacy baseline
          
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: |
            target/criterion/
          retention-days: 30

  coverage:
    name: Coverage
    needs: [check, feature-matrix, amp-engine-test, deny, benchmark]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: llvm-tools-preview
          override: true
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: coverage-stable
          cache-targets: true
      
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      
      - name: Generate coverage and enforce threshold
        run: |
          cargo llvm-cov --workspace --all-features \
                         --lcov --output-path lcov.info \
                         --fail-under-lines 80
      

      
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: lcov.info
          retention-days: 7

  build-release:
    name: Release Build (${{ matrix.os }})
    needs: check
    runs-on: ${{ matrix.os }}
    if: github.ref == 'refs/heads/main'
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: release-${{ matrix.os }}
          cache-targets: true
      
      - name: Build release
        run: cargo build --release --workspace
      
      - name: Test release build
        run: cargo test --release --workspace --all-features
      
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.os }}
          path: |
            target/release/gta_game*
            target/release/prefab-ls*
            target/release/collision_test*
          retention-days: 30

  # Oracle's Version Consistency Guard
  oracle-guard:
    name: Oracle's Version Consistency Guard
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.85.0
          override: true
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: oracle-guard
          cache-targets: true
      
      - name: 🛡️ Oracle's Version Consistency Guard
        run: |
          echo "🔍 Running Oracle's version consistency checks..."
          ./scripts/pre-commit-check.sh
      
      - name: 🚨 Failure Analysis
        if: failure()
        run: |
          echo ""
          echo "❌ ORACLE'S VERSION CONSISTENCY VIOLATED"
          echo ""
          echo "This CI failure prevents the exact issue that occurred in ADR-0007."
          echo "Fix version conflicts before merging."
          echo ""
          echo "Run locally: ./scripts/pre-commit-check.sh"
          exit 1

  # Job summary report
  ci-summary:
    name: CI Summary
    needs: [check, feature-matrix, amp-engine-test, deny, benchmark, coverage, oracle-guard, build-release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Multi-OS Check | ${{ needs.check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Feature Matrix | ${{ needs.feature-matrix.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| amp_engine Test | ${{ needs.amp-engine-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Check | ${{ needs.deny.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Benchmarks | ${{ needs.benchmark.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage | ${{ needs.coverage.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Oracle Guard | ${{ needs.oracle-guard.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Release Build | ${{ needs.build-release.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.check.result }}" != "success" ] || [ "${{ needs.feature-matrix.result }}" != "success" ] || [ "${{ needs.amp-engine-test.result }}" != "success" ] || [ "${{ needs.deny.result }}" != "success" ] || [ "${{ needs.benchmark.result }}" != "success" ] || [ "${{ needs.coverage.result }}" != "success" ] || [ "${{ needs.oracle-guard.result }}" != "success" ]; then
            echo "❌ **CI Failed**: Please check the failed jobs above" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ **CI Passed**: All checks successful" >> $GITHUB_STEP_SUMMARY
          fi
